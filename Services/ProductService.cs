using CsvImportDemo.Models;
using CsvImportDemo.Repositories;
using CsvImportDemo.Validators;
using CsvHelper;
using CsvHelper.Configuration;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System;

namespace CsvImportDemo.Services
{
    public class ProductService : IProductService
    {
        private readonly IProductRepository _repository;
        private readonly IProductValidator _validator;
        public ProductService(IProductRepository repository, IProductValidator validator)
        {
            _repository = repository;
            _validator = validator;
        }

        public async Task<(IEnumerable<Product> validProducts, IEnumerable<string> errors)> ValidateAndParseCsvAsync(Stream csvStream)
        {
            var validProducts = new List<Product>();
            var errors = new List<string>();
            
            try
            {
                using (var reader = new StreamReader(csvStream))
                using (var csv = new CsvReader(reader, new CsvConfiguration(CultureInfo.InvariantCulture)))
                {
                    var csvRecords = csv.GetRecords<ProductCsvDto>();
                    int row = 2; // Start from row 2 (accounting for header)
                    
                    foreach (var csvRecord in csvRecords)
                    {
                        // Convert CSV DTO to Product entity
                        var product = new Product
                        {
                            Name = csvRecord.Name,
                            Price = csvRecord.Price,
                            Quantity = csvRecord.Quantity
                            // Id will be auto-generated by database
                        };
                        
                        var (isValid, error) = _validator.Validate(product);
                        if (isValid)
                            validProducts.Add(product);
                        else
                            errors.Add($"Row {row}: {error}");
                        row++;
                    }
                }
            }
            catch (Exception ex)
            {
                errors.Add($"CSV parsing error: {ex.Message}");
            }
            
            return (validProducts, errors);
        }

        public async Task SaveProductsAsync(IEnumerable<Product> products)
        {
            await _repository.AddProductsAsync(products);
        }

        public async Task<IEnumerable<Product>> GetAllProductsAsync()
        {
            return await _repository.GetAllProductsAsync();
        }
    }
}